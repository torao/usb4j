/* **************************************************************************
 * Copyright (C) 2009 koiroha.org All Right Reserved
 * **************************************************************************
 * This module, contains source code, binary and documentation, is in the
 * BSD License, and comes with NO WARRANTY.
 *
 *                                        takami torao <torao@mars.dti.ne.jp>
 *                                                     http://www.koiroha.org
 * $Id: TransferType.java,v 1.3 2009/05/14 02:22:33 torao Exp $
*/
package org.koiroha.usb.desc;

// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// TransferType: 転送タイプ
// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
/**
 * USB エンドポイントの転送タイプを示す列挙型です。
 * <p>
 * @version usb4j 1.0 $Revision: 1.3 $ $Date: 2009/05/14 02:22:33 $
 * @author torao
 * @since 2009/04/27 Java2 SE 5.0
 */
public enum TransferType {

	// ======================================================================
	// コントロール転送タイプ
	// ======================================================================
	/**
	 * コントロール (Control) 転送を表すタイプです。
	 * <p>
	 */
	CONTROL(0x0),

	// ======================================================================
	// 等時間隔転送タイプ
	// ======================================================================
	/**
	 * 等時間隔 (Isochronous) 転送を表すタイプです。
	 * <p>
	 */
	ISOCHRONOUS(0x1),

	// ======================================================================
	// バルク転送タイプ
	// ======================================================================
	/**
	 * バルク (Bulk) 転送を表すタイプです。
	 * <p>
	 */
	BULK(0x2),

	// ======================================================================
	// 割り込み転送タイプ
	// ======================================================================
	/**
	 * 割り込み (Interrupt) 転送を表すタイプです。
	 * <p>
	 */
	INTERRUPT(0x3),

	;

	// ======================================================================
	// 値
	// ======================================================================
	/**
	 * このタイプの値です。
	 * <p>
	 */
	private final int value;

	// ======================================================================
	// コンストラクタ
	// ======================================================================
	/**
	 * 値を指定して構築を行います。
	 * <p>
	 * @param value 値
	 */
	private TransferType(int value){
		this.value = value;
		return;
	}

	// ======================================================================
	// 識別値の参照
	// ======================================================================
	/**
	 * この転送タイプを表す数値を参照します。
	 * <p>
	 * @return 転送タイプの数値
	 */
	public int getType(){
		return value;
	}

	// ======================================================================
	// タイプ値による参照
	// ======================================================================
	/**
	 * 指定されたタイプ値に対するインスタンスを参照します。
	 * <p>
	 * @param type 参照する転送タイプの値
	 * @return 転送タイプ
	 */
	public static TransferType valueOf(int type){
		for(TransferType t: values()){
			if(t.getType() == type){
				return t;
			}
		}
		assert(false): type;
		return null;
	}

}
