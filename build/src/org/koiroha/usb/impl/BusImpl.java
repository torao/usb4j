/* **************************************************************************
 * Copyright (C) 2009 koiroha.org All Right Reserved
 * **************************************************************************
 * This module, contains source code, binary and documentation, is in the
 * BSD License, and comes with NO WARRANTY.
 *
 *                                        takami torao <torao@mars.dti.ne.jp>
 *                                                     http://www.koiroha.org
 * $Id: BusImpl.java,v 1.3 2009/05/17 14:08:26 torao Exp $
*/
package org.koiroha.usb.impl;

import java.util.*;

import org.koiroha.usb.*;

// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// BusImpl: バス実装
// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
/**
 * バスの実装クラスです。
 * <p>
 * @version $Revision: 1.3 $ $Date: 2009/05/17 14:08:26 $
 * @author takami torao
 * @since 2009/05/14 Java2 SE 5.0
 */
public class BusImpl implements Bus {

	// ======================================================================
	// バス名
	// ======================================================================
	/**
	 * このバスの名前です。
	 * <p>
	 */
	private final String name;

	// ======================================================================
	// ルートハブ
	// ======================================================================
	/**
	 * このデバイスのルートハブです。物理トポロジー構成に対応していない実装のために複数のデバイス
	 * を保持することが出来ます。
	 * <p>
	 */
	private List<DeviceImpl> rootHub = new ArrayList<DeviceImpl>();

	// ======================================================================
	// コンストラクタ
	// ======================================================================
	/**
	 * このバスの名前を指定して構築を行います。
	 * <p>
	 * @param name デバイス名
	 */
	public BusImpl(String name) {
		this.name = name;
		return;
	}

	// ======================================================================
	// バス名の参照
	// ======================================================================
	/**
	 * このバスの名前を参照します。
	 * <p>
	 * @return バス名
	*/
	public String getName() {
		return name;
	}

	// ======================================================================
	// デバイスの参照
	// ======================================================================
	/**
	 * このバスに接続されている全てのデバイスを取得します。
	 * <p>
	 * @return デバイスの一覧
	*/
	public List<Device> getDevices(){
		List<Device> list = new ArrayList<Device>();
		for(DeviceImpl root: rootHub){
			getDevice(root, list);
		}
		return list;
	}

	// ======================================================================
	// デバイスの参照
	// ======================================================================
	/**
	 * 指定されたデバイスの子を全て取得します。
	 * <p>
	 * @param dev デバイス
	 * @param list リスト
	*/
	private static void getDevice(DeviceImpl dev, List<Device> list){
		list.add(dev);
		for(Device d: dev.getChildDevices()){
			getDevice((DeviceImpl)d, list);
		}
		return;
	}

	// ======================================================================
	// デバイスの参照
	// ======================================================================
	/**
	 * このバスのルートハブデバイスを参照します。USB 実装がデバイスのトポロジー構成に対応して
	 * いない場合は null を返します。
	 * <p>
	 * @return ルートハブデバイス
	*/
	public Device getRootHub(){
		if(rootHub.size() != 1){
			return null;
		}
		return rootHub.get(0);
	}

	// ======================================================================
	// デバイスの接続
	// ======================================================================
	/**
	 * このバスに指定されたデバイスを接続します。このデバイスはルートハブとなります。
	 * <p>
	 * @param device バスに接続するデバイス
	*/
	public void connect(DeviceImpl device){
		device.setBus(this);
		rootHub.add(device);
		return;
	}

}
