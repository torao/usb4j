/* **************************************************************************
 * Copyright (C) 2009 koiroha.org All Right Reserved
 * **************************************************************************
 * This module, contains source code, binary and documentation, is in the
 * BSD License, and comes with NO WARRANTY.
 *
 *                                        takami torao <torao@mars.dti.ne.jp>
 *                                                     http://www.koiroha.org
 * $Id: Interface.java,v 1.8 2009/05/21 12:02:54 torao Exp $
*/
package org.koiroha.usb;

import java.util.List;

import org.koiroha.usb.desc.InterfaceDescriptor;

// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Interface: USB インターフェース
// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
/**
 * USB のインターフェースを表すインターフェースです。インターフェースは複数の代替設定を持っており、
 * それぞれの代替設定でインターフェース記述子やエンドポイントが異なります。
 * <p>
 * @version usb4j 1.0 $Revision: 1.8 $ $Date: 2009/05/21 12:02:54 $
 * @author torao
 * @since 2009/04/23 Java2 SE 5.0
 */
public interface Interface {

	// ======================================================================
	// インターフェース番号の参照
	// ======================================================================
	/**
	 * このインターフェースの番号 {@code bInterfaceNumber} を参照します。
	 * <p>
	 * @return インターフェース番号
	 */
	public int getInterfaceNumber();

	// ======================================================================
	// コンフィギュレーションの参照
	// ======================================================================
	/**
	 * このインターフェースが属しているコンフィギュレーションを参照します。
	 * <p>
	 * @return コンフィギュレーション
	 */
	public Configuration getConfiguration();

	// ======================================================================
	// 代替設定の設定
	// ======================================================================
	/**
	 * このインターフェースに対する操作対象の代替設定
	 * {@link InterfaceDescriptor#getAlternateSetting() bAlternateSetting} を
	 * 設定します。
	 * このメソッドの呼び出しにはインターフェースが要求されている必要があります。
	 * <p>
	 * @param alt 設定する代替設定
	 * @throws USBException 代替設定の設定に失敗した場合
	 */
	public void setActiveAltSetting(int alt) throws USBException;

	// ======================================================================
	// 代替設定の参照
	// ======================================================================
	/**
	 * このインターフェースの現在の代替設定 {@code bAlternateSetting} を参照します。
	 * このメソッドは {@code getActiveAltSetting(false)} と等価です。
	 * <p>
	 * @return 現在の代替設定
	 * @throws USBException 代替設定の参照に失敗した場合
	 */
	public int getActiveAltSetting() throws USBException;

	// ======================================================================
	// 代替設定の参照
	// ======================================================================
	/**
	 * このインターフェースの現在の代替設定 {@code bAlternateSetting} を参照します。
	 * {@code forceRetrieve} に true を指定した場合、デバイスに GET_INTERFACE 要求を
	 * 発行し、インスタンスの保持している現在の代替設定値を更新して返します。
	 * <p>
	 * このメソッドの呼び出しにはインターフェースが要求されている必要があります。
	 * <p>
	 * @param forceRetrieve デバイスに GET_INTERFACE を発行する場合
	 * @return 現在の代替設定
	 * @throws USBException 代替設定の参照に失敗した場合
	 */
	public int getActiveAltSetting(boolean forceRetrieve) throws USBException;

	// ======================================================================
	// 代替設定の参照
	// ======================================================================
	/**
	 * このインターフェースの代替設定を参照します。
	 * <p>
	 * @return 代替設定のリスト
	 */
	public List<AltSetting> getAltSettings();

	// ======================================================================
	// インターフェースの要求確認
	// ======================================================================
	/**
	 * このインターフェースが要求済みかどうかを返します。
	 * <p>
	 * @return インターフェースが要求済みの場合 true
	*/
	public boolean isClaimed();

	// ======================================================================
	// インターフェースのオープン
	// ======================================================================
	/**
	 * システムにこのインターフェースを使用するよう要求 (claim) します。このインターフェースの
	 * エンドポイントに対して入出力操作を行う場合は事前にこのメソッドを呼び出しておく必要があり
	 * ます。
	 * <p>
	 * このメソッドを呼び出す前にデバイスを{@link Device#open() オープン}し、このインター
	 * フェースのコンフィギュレーションを選択しておく必要があります。
	 * <p>
	 * @throws ResourceBusyException 別の処理がこのインターフェースに排他アクセスを行っている場合
	 * @throws USBException インターフェースのオープンに失敗した場合
	 */
	public void claim() throws ResourceBusyException, USBException;

	// ======================================================================
	// インターフェースのクローズ
	// ======================================================================
	/**
	 * インターフェースを解放します。インターフェースが要求されていない場合や既にデバイスが解放さ
	 * れている場合は何も行われません。解放されたインターフェースは {@link #claim()} で再び
	 * 要求することが出来ます。
	 * <p>
	 * @throws USBException インターフェースの解放に失敗した場合
	 */
	public void release() throws USBException;

	// ======================================================================
	// 機能のクリア
	// ======================================================================
	/**
	 * このインターフェースに対して CLEAR_FEATURE 要求を実行します。
	 * <p>
	 * @param feature 機能識別子
	 * @throws USBException コントロール要求に失敗した場合
	 */
	public void clearFeature(int feature) throws USBException;

	// ======================================================================
	// 機能の設定
	// ======================================================================
	/**
	 * このインターフェースに対して SET_FEATURE 要求を実行します。
	 * <p>
	 * @param feature 機能識別子
	 * @throws USBException コントロール要求に失敗した場合
	 */
	public void setFeature(int feature) throws USBException;

	// ======================================================================
	// ステータスの取得
	// ======================================================================
	/**
	 * GET_STATUS 要求を実行してインターフェースのステータスを取得します。返値は UINT16 の
	 * 範囲をとります。
	 * <p>
	 * @return ステータス
	 * @throws USBException コントロール要求に失敗した場合
	 */
	public int getStatus() throws USBException;

}
