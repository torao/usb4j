/* **************************************************************************
 * Copyright (C) 2009 koiroha.org All Right Reserved
 * **************************************************************************
 * This module, contains source code, binary and documentation, is in the
 * BSD License, and comes with NO WARRANTY.
 *
 *                                        takami torao <torao@mars.dti.ne.jp>
 *                                                     http://www.koiroha.org
 * $Id: USBContext.java,v 1.2 2009/05/18 20:34:12 torao Exp $
*/
package org.koiroha.usb;

import java.util.List;

import org.koiroha.usb.event.USBContextListener;

// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// USBContext: USB コンテキスト
// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
/**
 * USB コンテキストを表すインターフェースです。USB コンテキストはシステムで利用可能な USB デバ
 * イスの論理構成ビューを保持しています。
 * <p>
 * コンテキストのインスタンスはリソースを保持しています。アプリケーションでの利用が終了したら
 * {@link #dispose()} メソッドを呼び出してインスタンスが保持しているリソース解放する必要があ
 * ります。サブクラスの実装はファイナライザで {@link #dispose()} を確実に行う必要がありますが
 * これはフェールセーフの機能であり、アプリケーションは明示的に {@link #dispose()} を呼び出す
 * 必要があります。ファイナライザ内で未解放のコンテキストを検出した場合は警告がログ出力されます。
 * <p>
 * @version $Revision: 1.2 $ $Date: 2009/05/18 20:34:12 $
 * @author takami torao
 * @since usb4j 1.0 (Java2 SE 5.0) 2009/05/18
 */
public interface USBContext {

	// ======================================================================
	// USB デバイス構成の同期化
	// ======================================================================
	/**
	 * このコンテキストの保持する USB デバイスを実際の状態と同期します。現在のコンテキスト内に存在
	 * するデバイスインスタンスは全て無効化されます。
	 * <p>
	 * @throws USBException USB デバイスの同期化に失敗した場合
	*/
	public void sync() throws USBException;

	// ======================================================================
	// USB デバイスの取得
	// ======================================================================
	/**
	 * システムで検出された全ての USB デバイスを取得します。このメソッドは
	 * {@link #lookup(int, int) lookup}(-1, -1) と等価です。
	 * <p>
	 * @return USB デバイスのリスト
	 * @throws USBException USB デバイスの取得に失敗した場合
	*/
	public List<Device> lookup() throws USBException;

	// ======================================================================
	// USB デバイスの取得
	// ======================================================================
	/**
	 * 指定されたベンダー ID、製品 ID に一致する USB デバイスを取得します。ベンダー ID に
	 * 負の値を指定した場合は全ての USB デバイスが検索対象となります。また製品 ID に負の値を
	 * 指定した場合は該当するベンダー ID を持つ全ての USB デバイスが検索対象となります。
	 * 該当する USB デバイスがコンテキスト内に存在されなかった場合、メソッドは長さ 0 のリストを
	 * 返します。
	 * <p>
	 * @param idVendor 0〜65535 のベンダー ID (負の値を指定した場合はワイルドカード)
	 * @param idProduct 0〜65535 の製品 ID (負の値を指定した場合はワイルドカード)
	 * @return USB デバイスのリスト
	 * @throws USBException USB デバイスの取得に失敗した場合
	*/
	public List<Device> lookup(final int idVendor, final int idProduct) throws USBException;

	// ======================================================================
	// USB デバイスの取得
	// ======================================================================
	/**
	 * 指定されたデバイスフィルタを使用してこのコンテキスト内の USB デバイスを取得します。フィルタ
	 * に null を指定すると全てのデバイスが対象となります。
	 * <p>
	 * @param filter デバイスフィルタ
	 * @return USB デバイスのリスト
	 * @throws USBException USB デバイスの取得に失敗した場合
	*/
	public List<Device> lookup(DeviceFilter filter) throws USBException;

	// ======================================================================
	// コンテキストの解放
	// ======================================================================
	/**
	 * このコンテキストを破棄します。コンテキスト内で使用していた全ての USB デバイスインスタンス
	 * は無効化されます。
	 * <p>
	 * @throws USBException コンテキストの解放に失敗した場合
	*/
	public void dispose() throws USBException;

	// ======================================================================
	// リスナの追加
	// ======================================================================
	/**
	 * コンテキストにリスナを追加します。
	 * <p>
	 * @param l 追加するリスナ
	*/
	public void addContextListener(USBContextListener l);

	// ======================================================================
	// リスナの削除
	// ======================================================================
	/**
	 * コンテキストからリスナを削除します。
	 * <p>
	 * @param l 削除するリスナ
	*/
	public void removeContextListener(USBContextListener l);

}
