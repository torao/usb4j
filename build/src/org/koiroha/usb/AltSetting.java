/* **************************************************************************
 * Copyright (C) 2009 koiroha.org All Right Reserved
 * **************************************************************************
 * This module, contains source code, binary and documentation, is in the
 * BSD License, and comes with NO WARRANTY.
 *
 *                                        takami torao <torao@mars.dti.ne.jp>
 *                                                     http://www.koiroha.org
 * $Id: AltSetting.java,v 1.5 2009/05/21 12:02:54 torao Exp $
*/
package org.koiroha.usb;

import java.util.List;

import org.koiroha.usb.desc.*;

// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// AltSetting: 代替設定
// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
/**
 * UBS インターフェースの代替設定 (Alternate Setting) を表すインターフェースです。
 * <p>
 * @version $Revision: 1.5 $ $Date: 2009/05/21 12:02:54 $
 * @author takami torao
 * @since usb4j 1.0 (Java2 SE 5.0) 2009/05/15
 */
public interface AltSetting {

	// ======================================================================
	// インターフェースの参照
	// ======================================================================
	/**
	 * この代替設定のインターフェースを参照します。
	 * <p>
	 * @return インターフェース
	 */
	public Interface getInterface();

	// ======================================================================
	// インターフェース記述子の参照
	// ======================================================================
	/**
	 * この代替設定に対するインターフェース記述子を参照します。
	 * <p>
	 * @return インターフェース記述子
	 */
	public InterfaceDescriptor getDescriptor();

	// ======================================================================
	// 追加記述子の参照
	// ======================================================================
	/**
	 * このインターフェースに設定されているクラス仕様/ベンダー仕様の記述子を参照します。追加の
	 * 記述子が指定されていない場合は長さ 0 のリストを返します。
	 * <p>
	 * @return 代替設定の追加の記述子
	 */
	public List<Descriptor> getAdditionalDescriptor();

	// ======================================================================
	// 代替設定の参照
	// ======================================================================
	/**
	 * この代替設定の {@code bAlternateSetting} 値を返します。
	 * <p>
	 * @return 代替設定
	 */
	public int getAltSetting();

	// ======================================================================
	// エンドポイントの参照
	// ======================================================================
	/**
	 * この代替設定のエンドポイントを参照します。返値は
	 * {@link InterfaceDescriptor#getNumEndpoint()} 個のエンドポイントを含むリスト
	 * です。
	 * コントロール転送を表す Endpoint0 は含まれません。
	 * <p>
	 * @return エンドポイントのリスト
	 */
	public List<Endpoint> getEndpoints();

	// ======================================================================
	// コントロール転送の実行
	// ======================================================================
	/**
	 * この代替設定でコントロール転送を実行します。このメソッドはエンドポイント 0 に対する簡易
	 * メソッドです。
	 * <p>
	 * @param request デバイスリクエスト
	 * @param timeout タイムアウト (ミリ秒)
	 * @return 実際の入出力サイズ
	 * @throws USBException 言語 ID の取得に失敗した場合
	 */
	public int controlTransfer(ControlRequest request, int timeout) throws USBException;

	// ======================================================================
	// コントロール転送の実行
	// ======================================================================
	/**
	 * この代替設定の指定されたエンドポイントでコントロール転送を実行します。
	 * タイムアウトに負の値を指定した場合は実装側で可能な限りの待機を行います。
	 * <p>
	 * このメソッドの実行にはインターフェースが要求されている必要があります。
	 * <p>
	 * @param request デバイスリクエスト
	 * @param edpt エンドポイント番号
	 * @param timeout タイムアウト (ミリ秒)
	 * @return 実際の入出力サイズ
	 * @throws USBException 言語 ID の取得に失敗した場合
	 */
	public int controlTransfer(ControlRequest request, int edpt, int timeout) throws USBException;

}
